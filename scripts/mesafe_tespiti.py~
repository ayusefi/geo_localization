#!/usr/bin/env python
import roslib
roslib.load_manifest('turtlebot_detection')
import sys
import rospy
import cv2
import math
import numpy as np
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import TwistStamped
import sensor_msgs.point_cloud2 as pc2

import numpy

cv_image=np.zeros((480,640,3), dtype=np.uint8)
bridge = CvBridge()  
cloud_points=[]

blue_lower = np.array([20, 32, 19])
blue_upper = np.array([100, 255, 255])	

blue_lower=np.array([20,32,19],np.uint8)
blue_upper=np.array([100,255,255],np.uint8)

data2=None

def callback_kinect(data) :
    global data2
    data2=data
          
def read_depth(width, height, data):
    data_out = pc2.read_points(data, field_names = ("x", "y", "z"), skip_nans=False, uvs=[[width,height]])
    return next(data_out) 



  
check=False
def main(args):
    global check
    rospy.init_node('detection', anonymous=True)    
     
    rospy.Subscriber("/camera/depth/points", PointCloud2, callback_kinect,queue_size=3)
    pub = rospy.Publisher('/object_geometry', TwistStamped)        
     
 
    while not rospy.is_shutdown():
	numpy.invert(cv_image)
        blur=cv2.GaussianBlur(np.array(cv_image),(5,5),0)
	
	cv2.imshow('dsada',blur)
        hsv=cv2.cvtColor(blur,cv2.COLOR_BGR2HSV)
        
        blue=cv2.inRange(hsv,blue_lower,blue_upper)

        blue=cv2.erode(blue,None,iterations=2)
        blue=cv2.dilate(blue,None,iterations=2)



        #Yesil

        w=-1
        h=-1
        x=-1
        y=-1
  
            

            if data2!=None and check:
                if math.isnan(read_depth((x+w/2),(y+h/3),data2)[0]):
                    check=False
                if check:
                   

                    middle=read_depth((x+w/2),(y+h/2),data2)
                    
                    msg=TwistStamped()
                    msg.header.frame_id="Yesil"
                    msg.twist.linear.x=middle[0]
                    msg.twist.linear.y=middle[1]
                    msg.twist.linear.z=middle[2]
                        
                    msg.twist.angular.x=0
                    msg.twist.angular.y=0
                    msg.twist.angular.z=0
                    pub.publish(msg)
             
        cv2.waitKey(50)
        

                
        cv2.imshow('deneme',cv_image) 
        
        if(cv2.waitKey(50) & 0xFF ==ord('q')):
	      	break
cv2.destroyAllWindows()



if __name__ == '__main__':
    main(sys.argv)
